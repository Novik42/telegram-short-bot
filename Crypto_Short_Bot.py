import requests
from telegram import Bot
from bs4 import BeautifulSoup
import asyncio
import time
from datetime import datetime
import threading
from http.server import BaseHTTPRequestHandler, HTTPServer

# üîπ –í–≤–µ–¥–∏ —Å–≤—ñ–π Telegram-—Ç–æ–∫–µ–Ω —ñ CHAT_ID
TELEGRAM_TOKEN = "–¢–í–û–ô_TELEGRAM_TOKEN"
CHAT_ID = "–¢–í–û–ô_CHAT_ID"

bot = Bot(token=TELEGRAM_TOKEN)

# üîπ –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ Telegram (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)
async def send_telegram_message(text):
    await bot.send_message(chat_id=CHAT_ID, text=text, parse_mode="Markdown")

# üîπ –ó–∞–ø–∏—Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ —É —Ñ–∞–π–ª
def save_to_file(text):
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    with open("short_signals_log.txt", "a") as f:
        f.write(f"[{timestamp}]\n{text}\n\n")

# üîπ –û—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω–æ–≤–∏—Ö —Ç–æ–∫–µ–Ω—ñ–≤ –∑ CoinGecko API
def get_new_tokens():
    url = "https://api.coingecko.com/api/v3/coins/markets"
    params = {"vs_currency": "usd", "order": "newest", "per_page": 20, "page": 1}
    response = requests.get(url, params=params)
    return response.json()

# üîπ –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—Ä–µ–º–∞—Ä–∫–µ—Ç–Ω–∏—Ö —Ü—ñ–Ω –∑ MEXC API
def get_mexc_premarket(symbol):
    url = f"https://www.mexc.com/open/api/v2/market/depth?symbol={symbol}_usdt&depth=5"
    try:
        response = requests.get(url)
        if response.status_code != 200 or not response.text:
            return None
        data = response.json()
        asks = data.get("data", {}).get("asks", [])
        if asks:
            return float(asks[0][0])
    except Exception:
        pass
    return None

# üîπ –ê–Ω–∞–ª—ñ–∑ —Ç–æ–∫–µ–Ω—ñ–≤
def analyze_token(token):
    name = token["name"]
    price = token["current_price"]
    market_cap = token.get("market_cap", 0)
    symbol = token["symbol"].upper()
    date_listed = token.get("atl_date", "–Ω–µ–≤—ñ–¥–æ–º–æ")[:10]

    # üîª –§—ñ–ª—å—Ç—Ä –ø–æ–ø—É–ª—è—Ä–Ω–∏—Ö —Ç–æ–∫–µ–Ω—ñ–≤ —Ç–∞ –≤–µ–ª–∏–∫–∏—Ö –∫–∞–ø—ñ—Ç–∞–ª—ñ–∑–∞—Ü—ñ–π
    excluded_tokens = ["BTC", "ETH", "USDT", "SOL", "ADA", "DOGE", "TRX", "USDC"]
    if symbol in excluded_tokens or market_cap > 100000000:
        return None

    premarket_price = get_mexc_premarket(symbol)

    # üîª –õ–æ–≥—ñ–∫–∞ LONG/SHORT
    if premarket_price:
        if premarket_price > price:
            potential = "üü¢ –ü–æ—Ç–µ–Ω—Ü—ñ–∞–ª –¥–ª—è –ª–æ–Ω–≥—É"
        elif premarket_price < price:
            potential = "üî¥ –ü–æ—Ç–µ–Ω—Ü—ñ–∞–ª –¥–ª—è —à–æ—Ä—Ç—É"
        else:
            potential = "‚ö™Ô∏è –ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ"
    else:
        potential = "‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –¥–∞–Ω–∏—Ö"

    # üîπ –ü–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥ (–¥–ª—è –ø—Ä–∏–∫–ª–∞–¥—É)
    rating = 6 if market_cap < 50000000 else 4
    rating_text = f"{rating}/10"

    result = (
        f"üöÄ *–ù–æ–≤–∏–π —Ç–æ–∫–µ–Ω*: {name} ({symbol})\n"
        f"üí≤ –¶—ñ–Ω–∞: ${price}\n"
        f"üìä –ö–∞–ø–∞: ${market_cap:,}\n"
        f"üìÖ –õ—ñ—Å—Ç–∏–Ω–≥: {date_listed} (CoinGecko)\n"
        f"üìà –†–µ–π—Ç–∏–Ω–≥: {rating_text}\n"
        f"{potential}"
    )

    return result

# üîπ –û—Å–Ω–æ–≤–Ω–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è
async def main_loop():
    while True:
        try:
            await send_telegram_message("üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π –∑–∞–ø—É—Å–∫ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ç–æ–∫–µ–Ω—ñ–≤")
            tokens = get_new_tokens()

            for token in tokens:
                result = analyze_token(token)
                if result:
                    await send_telegram_message(result)
                    save_to_file(result)

        except Exception as e:
            error_msg = f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ —Ü–∏–∫–ª—ñ: {e}"
            save_to_file(error_msg)

        await asyncio.sleep(3600)  # –∑–∞–ø—É—Å–∫ —Ä–∞–∑ –Ω–∞ –≥–æ–¥–∏–Ω—É

# üîπ HTTP-–∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è Render
class StubHandler(BaseHTTPRequestHandler):
    def do_GET(self):
        self.send_response(200)
        self.end_headers()
        self.wfile.write(b"Bot is running")

def run_http_server():
    server = HTTPServer(('0.0.0.0', 10000), StubHandler)
    server.serve_forever()

# üîπ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    threading.Thread(target=run_http_server, daemon=True).start()
    time.sleep(2)
    asyncio.run(main_loop())