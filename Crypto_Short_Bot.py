import requests
from telegram import Bot
from bs4 import BeautifulSoup
import asyncio
import time
from datetime import datetime
import threading
from http.server import BaseHTTPRequestHandler, HTTPServer

# üîπ –í–≤–µ–¥–∏ —Å–≤—ñ–π Telegram-—Ç–æ–∫–µ–Ω —ñ CHAT_ID
TELEGRAM_TOKEN = "7793935034:AAGT6uSuzqN5hsCxkVbYKwLIoH-BkB4C2fc"
CHAT_ID = "334517684"

bot = Bot(token=TELEGRAM_TOKEN)

# üîπ –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ Telegram (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)
async def send_telegram_message(text):
    await bot.send_message(chat_id=CHAT_ID, text=text)

# üîπ –ó–∞–ø–∏—Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ —É —Ñ–∞–π–ª
def save_to_file(text):
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    with open("short_signals_log.txt", "a") as f:
        f.write(f"[{timestamp}]\n{text}\n\n")

# üîπ –û—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω–æ–≤–∏—Ö —Ç–æ–∫–µ–Ω—ñ–≤ –∑ CoinGecko API
def get_new_tokens():
    url = "https://api.coingecko.com/api/v3/coins/markets"
    params = {"vs_currency": "usd", "order": "newest", "per_page": 10, "page": 1}
    response = requests.get(url, params=params)
    return response.json()

# üîπ –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—Ä–µ–º–∞—Ä–∫–µ—Ç–Ω–∏—Ö —Ü—ñ–Ω –∑ MEXC API
def get_mexc_premarket(symbol):
    url = f"https://www.mexc.com/open/api/v2/market/depth?symbol={symbol}_usdt&depth=5"
    try:
        response = requests.get(url)
        if response.status_code != 200 or not response.text:
            print(f"‚ùó –ü–æ—Ä–æ–∂–Ω—è –∞–±–æ –ø–æ–º–∏–ª–∫–æ–≤–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ MEXC –¥–ª—è {symbol}: {response.text}")
            return None
        data = response.json()
        asks = data.get("data", {}).get("asks", [])
        if asks:
            return float(asks[0][0])
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ MEXC –¥–∞–Ω–∏—Ö –¥–ª—è {symbol}: {e}")
    return None

# üîπ –í–µ–±—Å–∫—Ä–∞–ø—ñ–Ω–≥ Twitter/X –¥–ª—è –Ω–æ–≤–∏–Ω
def get_latest_twitter_news():
    url = "https://nitter.net/Lookonchain"
    try:
        response = requests.get(url)
        soup = BeautifulSoup(response.text, "html.parser")
        tweets = soup.find_all("div", class_="timeline-item")
        news = [tweet.text.strip() for tweet in tweets[:3]]
        return news
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –Ω–æ–≤–∏–Ω –∑ Twitter: {e}")
    return []

# üîπ –°–∫–æ—Ä–∏–Ω–≥ —Ç–æ–∫–µ–Ω–∞ —Ç–∞ —Å–∏–≥–Ω–∞–ª
def score_token(token, premarket_price=None, news_mentions=None):
    score = 0
    reasons = []

    if token.get("market_cap") and token["market_cap"] < 50_000_000:
        score += 2
        reasons.append("üß¢ –ù–∏–∑—å–∫–∞ –∫–∞–ø–∞")

    if premarket_price and token["current_price"] > premarket_price * 1.5:
        score += 2
        reasons.append("üìâ –ü–µ—Ä–µ–∫—É–ø –Ω–∞ –ø—Ä–µ–º–∞—Ä–∫–µ—Ç—ñ")

    if news_mentions:
        score += 2
        reasons.append("üì∞ –Ñ –∑–≥–∞–¥–∫–∞ —É –Ω–æ–≤–∏–Ω–∞—Ö")

    if token.get("price_change_percentage_24h", 0) < -10:
        score += 2
        reasons.append("üìâ –î–∞–º–ø —Ü—ñ–Ω–∏")

    if token.get("total_volume", 0) < 100_000:
        score += 1
        reasons.append("üí§ –ú–∞–ª–∏–π –æ–±—Å—è–≥")

    return score, reasons

def determine_signal(score):
    if score >= 7:
        return "SHORT", "üîª –®–æ—Ä—Ç–æ–≤–∏–π —Ä–∏–∑–∏–∫ –≤–∏—Å–æ–∫–∏–π"
    elif score <= 2:
        return "LONG", "üü¢ –ü–æ—Ç–µ–Ω—Ü—ñ–∞–ª –¥–ª—è –ª–æ–Ω–≥—É"
    else:
        return "‚ö†Ô∏è –ù–ï–í–ò–ó–ù–ê–ß–ï–ù–û", "–†–∏–∑–∏–∫ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–∏–π –∞–±–æ –∑–º—ñ—à–∞–Ω–∏–π"

def build_message(token, score, reasons, signal_type, comment):
    name = token["name"]
    price = token["current_price"]
    cap = token.get("market_cap", 0)
    symbol = token["symbol"].upper()

    msg = f"üîç *{name}* ({symbol})\nüí∞ –¶—ñ–Ω–∞: ${price:.4f}\nüß¢ –ö–∞–ø–∞: ${cap:,}\n"
    msg += f"üìä –°–∫–æ—Ä–∏–Ω–≥: {score}/10\n{comment}\n\n"
    if reasons:
        msg += "üìå –ü—Ä–∏—á–∏–Ω–∏:\n" + "\n".join(f"‚Äì {r}" for r in reasons)

    return msg

# üîπ –ê–Ω–∞–ª—ñ–∑ —Ç–æ–∫–µ–Ω–∞
def analyze_token(token, news=None):
    symbol = token["symbol"].upper()
    if symbol in ["BTC", "ETH", "USDT", "XRP", "BNB"]:
        return None

    premarket_price = get_mexc_premarket(symbol)
    news_mentions = [n for n in news if symbol in n.upper()] if news else []
    score, reasons = score_token(token, premarket_price, news_mentions)
    signal_type, comment = determine_signal(score)

    if signal_type in ["LONG", "SHORT"]:
        return build_message(token, score, reasons, signal_type, comment)
    return None

# üîπ –û—Å–Ω–æ–≤–Ω–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è
async def main_loop():
    while True:
        try:
            await send_telegram_message("üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π –∑–∞–ø—É—Å–∫ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ç–æ–∫–µ–Ω—ñ–≤")
            tokens = get_new_tokens()
            news = get_latest_twitter_news()

            for token in tokens:
                result = analyze_token(token, news)
                if result:
                    await send_telegram_message(result)
                    save_to_file(result)

            if news:
                news_text = "üì∞ –û—Å—Ç–∞–Ω–Ω—ñ –Ω–æ–≤–∏–Ω–∏:\n" + "\n".join(news)
                await send_telegram_message(news_text)
                save_to_file(news_text)

        except Exception as e:
            error_msg = f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ —Ü–∏–∫–ª—ñ: {e}"
            print(error_msg)
            save_to_file(error_msg)

        await asyncio.sleep(3600)  # –∑–∞–ø—É—Å–∫ —Ä–∞–∑ –Ω–∞ –≥–æ–¥–∏–Ω—É

# üîπ HTTP-–∑–∞–≥–ª—É—à–∫–∞ + –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
class StubHandler(BaseHTTPRequestHandler):
    def do_GET(self):
        self.send_response(200)
        self.end_headers()
        self.wfile.write(b"Bot is running")

if __name__ == "__main__":
    threading.Thread(target=lambda: HTTPServer(('0.0.0.0', 10000), StubHandler).serve_forever(), daemon=True).start()
    time.sleep(2)
    asyncio.run(main_loop())
