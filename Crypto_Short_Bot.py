import requests
from telegram import Bot
from bs4 import BeautifulSoup
import asyncio
import threading
from http.server import BaseHTTPRequestHandler, HTTPServer
from datetime import datetime
import time

# üîπ –í–≤–µ–¥–∏ —Å–≤—ñ–π Telegram-—Ç–æ–∫–µ–Ω —ñ CHAT_ID
TELEGRAM_TOKEN = "YOUR_TELEGRAM_TOKEN"
CHAT_ID = "YOUR_CHAT_ID"

bot = Bot(token=TELEGRAM_TOKEN)

# üîπ –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ Telegram
async def send_telegram_message(text):
    await bot.send_message(chat_id=CHAT_ID, text=text, parse_mode="Markdown")

# üîπ –ó–∞–ø–∏—Å –ª–æ–≥—ñ–≤ —É —Ñ–∞–π–ª
def save_to_file(text):
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    with open("short_signals_log.txt", "a") as f:
        f.write(f"[{timestamp}]\n{text}\n\n")

# üîπ –û—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω–æ–≤–∏—Ö —Ç–æ–∫–µ–Ω—ñ–≤ –∑ CoinGecko
def get_new_tokens():
    url = "https://api.coingecko.com/api/v3/coins/markets"
    params = {"vs_currency": "usd", "order": "newest", "per_page": 10, "page": 1}
    response = requests.get(url, params=params)
    return response.json()

# üîπ –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—Ä–µ–º–∞—Ä–∫–µ—Ç–Ω–∏—Ö —Ü—ñ–Ω –∑ MEXC
def get_mexc_premarket(symbol):
    url = f"https://www.mexc.com/open/api/v2/market/depth?symbol={symbol}_usdt&depth=5"
    try:
        response = requests.get(url)
        data = response.json()
        asks = data.get("data", {}).get("asks", [])
        return float(asks[0][0]) if asks else None
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ MEXC: {e}")
        return None

# üîπ –û—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω–æ–≤–∏–Ω –∑ Lookonchain
def get_latest_twitter_news():
    url = "https://nitter.net/Lookonchain"
    try:
        response = requests.get(url)
        soup = BeautifulSoup(response.text, "html.parser")
        tweets = soup.find_all("div", class_="timeline-item")
        news = [tweet.text.strip() for tweet in tweets[:3]]
        return news
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ Twitter: {e}")
        return []

# üîπ –û—Ü—ñ–Ω–∫–∞ (—Ä–µ–π—Ç–∏–Ω–≥) —Ç–æ–∫–µ–Ω–∞
def calculate_rating(token):
    rating = 0
    market_cap = token.get("market_cap", 0)
    volume = token.get("total_volume", 0)

    if market_cap > 10000000:
        rating += 3
    if volume > 500000:
        rating += 3
    if token.get("price_change_percentage_24h", 0) > 0:
        rating += 4

    return rating

# üîπ –ê–Ω–∞–ª—ñ–∑ —Ç–æ–∫–µ–Ω—ñ–≤ –∑ –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è–º LONG/SHORT
def analyze_token(token):
    name = token["name"]
    symbol = token["symbol"].upper()
    price = token["current_price"]
    market_cap = token.get("market_cap", 0)
    premarket_price = get_mexc_premarket(symbol)

    rating = calculate_rating(token)

    direction = "üî¥ SHORT" if rating < 5 else "üü¢ LONG"

    result = (
        f"*{name}* ({symbol})\n"
        f"üí∞ –¶—ñ–Ω–∞: ${price}\n"
        f"üß¢ –ö–∞–ø–∞: ${market_cap:,}\n"
        f"üìä –†–µ–π—Ç–∏–Ω–≥: {rating}/10\n"
        f"{direction}"
    )

    if premarket_price:
        result += f"\n‚ö°Ô∏è –ü—Ä–µ–º–∞—Ä–∫–µ—Ç (MEXC): ${premarket_price}"

    return result

# üîπ –û—Å–Ω–æ–≤–Ω–∏–π —Ü–∏–∫–ª —Ä–æ–±–æ—Ç–∏ –±–æ—Ç–∞
async def main_loop():
    await send_telegram_message("üöÄ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–æ–∫–µ–Ω—ñ–≤ —Å—Ç–∞—Ä—Ç—É–≤–∞–ª–∞.")
    while True:
        try:
            tokens = get_new_tokens()
            news = get_latest_twitter_news()

            for token in tokens:
                result = analyze_token(token)
                if result:
                    await send_telegram_message(result)
                    save_to_file(result)

            if news:
                news_text = "üì∞ –û—Å—Ç–∞–Ω–Ω—ñ –Ω–æ–≤–∏–Ω–∏:\n" + "\n".join(news)
                await send_telegram_message(news_text)
                save_to_file(news_text)

        except Exception as e:
            error_msg = f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ —Ü–∏–∫–ª—ñ: {e}"
            print(error_msg)
            save_to_file(error_msg)

        await asyncio.sleep(3600)  # –ø–∞—É–∑–∞ 1 –≥–æ–¥–∏–Ω–∞

# üîπ HTTP-–∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è Render
class StubHandler(BaseHTTPRequestHandler):
    def do_GET(self):
        self.send_response(200)
        self.end_headers()
        self.wfile.write(b"Bot is running")

def run_http_server():
    server = HTTPServer(('0.0.0.0', 10000), StubHandler)
    server.serve_forever()

# üîπ –¢–æ—á–∫–∞ –≤—Ö–æ–¥—É
if __name__ == "__main__":
    threading.Thread(target=run_http_server, daemon=True).start()
    time.sleep(2)  # –∑–∞—Ç—Ä–∏–º–∫–∞ –¥–ª—è Render
    asyncio.run(main_loop())
