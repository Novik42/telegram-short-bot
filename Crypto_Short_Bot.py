import requests
from telegram import Bot
from bs4 import BeautifulSoup
import asyncio
import time
from datetime import datetime

# üîπ –í–≤–µ–¥–∏ —Å–≤—ñ–π Telegram-—Ç–æ–∫–µ–Ω —ñ CHAT_ID
TELEGRAM_TOKEN = "7793935034:AAGT6uSuzqN5hsCxkVbYKwLIoH-BkB4C2fc"
CHAT_ID = "334517684"

bot = Bot(token=TELEGRAM_TOKEN)

# üîπ –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ Telegram (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)
async def send_telegram_message(text):
    await bot.send_message(chat_id=CHAT_ID, text=text)

# üîπ –ó–∞–ø–∏—Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ —É —Ñ–∞–π–ª
def save_to_file(text):
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    with open("short_signals_log.txt", "a") as f:
        f.write(f"[{timestamp}]\n{text}\n\n")

# üîπ –û—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω–æ–≤–∏—Ö —Ç–æ–∫–µ–Ω—ñ–≤ –∑ CoinGecko API
def get_new_tokens():
    url = "https://api.coingecko.com/api/v3/coins/markets"
    params = {"vs_currency": "usd", "order": "newest", "per_page": 10, "page": 1}
    response = requests.get(url, params=params)
    return response.json()

# üîπ –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—Ä–µ–º–∞—Ä–∫–µ—Ç–Ω–∏—Ö —Ü—ñ–Ω –∑ MEXC API
def get_mexc_premarket(symbol):
    url = f"https://www.mexc.com/open/api/v2/market/depth?symbol={symbol}_usdt&depth=5"
    try:
        response = requests.get(url)
        if response.status_code != 200 or not response.text:
            print(f"‚ùó –ü–æ—Ä–æ–∂–Ω—è –∞–±–æ –ø–æ–º–∏–ª–∫–æ–≤–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ MEXC –¥–ª—è {symbol}: {response.text}")
            return None
        data = response.json()
        asks = data.get("data", {}).get("asks", [])
        if asks:
            return float(asks[0][0])
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ MEXC –¥–∞–Ω–∏—Ö –¥–ª—è {symbol}: {e}")
    return None

# üîπ –í–µ–±—Å–∫—Ä–∞–ø—ñ–Ω–≥ Twitter/X –¥–ª—è –Ω–æ–≤–∏–Ω
def get_latest_twitter_news():
    url = "https://nitter.net/Lookonchain"
    try:
        response = requests.get(url)
        soup = BeautifulSoup(response.text, "html.parser")
        tweets = soup.find_all("div", class_="timeline-item")
        news = [tweet.text.strip() for tweet in tweets[:3]]
        return news
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –Ω–æ–≤–∏–Ω –∑ Twitter: {e}")
    return []

# üîπ –ê–Ω–∞–ª—ñ–∑ —Ç–æ–∫–µ–Ω—ñ–≤
def analyze_token(token):
    name = token["name"]
    price = token["current_price"]
    market_cap = token.get("market_cap", 0)
    symbol = token["symbol"].upper()

    # üîª –§—ñ–ª—å—Ç—Ä –ø–æ–ø—É–ª—è—Ä–Ω–∏—Ö —Ç–æ–∫–µ–Ω—ñ–≤
    if symbol in ["BTC", "ETH", "USDT", "XRP", "BNB"]:
        return None

    premarket_price = get_mexc_premarket(symbol)

    if market_cap > 100000000:
        return None

    result = f"üî• –ù–æ–≤–∏–π —Ç–æ–∫–µ–Ω –¥–ª—è —à–æ—Ä—Ç—É: {name}\nüí∞ –¶—ñ–Ω–∞: ${price}\nüìâ –ö–∞–ø—ñ—Ç–∞–ª—ñ–∑–∞—Ü—ñ—è: ${market_cap}\n"
    if premarket_price:
        result += f"‚ö°Ô∏è –ü—Ä–µ–º–∞—Ä–∫–µ—Ç –Ω–∞ MEXC: ${premarket_price}\n"

    return result

# üîπ –û—Å–Ω–æ–≤–Ω–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è
async def main_loop():
    while True:
        try:
            await send_telegram_message("üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π –∑–∞–ø—É—Å–∫ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ç–æ–∫–µ–Ω—ñ–≤")
            tokens = get_new_tokens()
            news = get_latest_twitter_news()

            for token in tokens:
                result = analyze_token(token)
                if result:
                    await send_telegram_message(result)
                    save_to_file(result)

            if news:
                news_text = "üì∞ –û—Å—Ç–∞–Ω–Ω—ñ –Ω–æ–≤–∏–Ω–∏:\n" + "\n".join(news)
                await send_telegram_message(news_text)
                save_to_file(news_text)

        except Exception as e:
            error_msg = f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ —Ü–∏–∫–ª—ñ: {e}"
            print(error_msg)
            save_to_file(error_msg)

        await asyncio.sleep(3600)  # –∑–∞–ø—É—Å–∫ —Ä–∞–∑ –Ω–∞ –≥–æ–¥–∏–Ω—É

# üîπ –ü—Ä–æ—Å—Ç–∏–π HTTP-—Å–µ—Ä–≤–µ—Ä-–∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è Render
import threading
from http.server import BaseHTTPRequestHandler, HTTPServer

class StubHandler(BaseHTTPRequestHandler):
    def do_GET(self):
        self.send_response(200)
        self.end_headers()
        self.wfile.write(b"Bot is running")

def run_http_server():
    server = HTTPServer(('0.0.0.0', 10000), StubHandler)
    server.serve_forever()

# üîπ –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    threading.Thread(target=run_http_server, daemon=True).start()
    time.sleep(2)  # –¥–∞—Ç–∏ Render —á–∞—Å –Ω–∞ —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è –ø–æ—Ä—Ç—É
    asyncio.run(main_loop())
